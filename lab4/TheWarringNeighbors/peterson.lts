const False = 0
const True = 1
range Bool = False..True
set BoolActions = {setTrue, setFalse, [False], [True]}
BOOLVAR = VAL[False],

VAL[v:Bool] = (setTrue -> VAL[True]
			|setFalse -> VAL[False]
			|[v] -> VAL[v]
			).
||FLAGS = (flag1:BOOLVAR || flag2:BOOLVAR).

range Card = 1..2
set CardActions = {set1,set2,[1],[2]}
CARDVAR = VALC[1],
VALC[i:Card] = (set1 -> VALC[1]
			|set2 -> VALC[2]
			|[i] -> VALC[i]).
||TURN = (turn:CARDVAR).

NEIGHBOR1 = (flag1.setTrue -> turn.set2 -> TEST),
TEST = (flag2[raised:Bool] -> turn[indicator:Card] ->
		if (raised && indicator==2) then (flag1.setFalse -> NEIGHBOR1)
		else (enter -> leave -> flag1.setFalse -> NEIGHBOR1)
			) + {{flag1,flag2}.BoolActions, turn.CardActions}.

NEIGHBOR2 = (flag2.setTrue -> turn.set1 -> TEST),
TEST = (flag1[raised:Bool] -> turn[indicator:Card] ->
		if (raised && indicator==1) then (flag2.setFalse -> NEIGHBOR2)
		else (enter -> leave -> flag2.setFalse -> NEIGHBOR2)
			) + {{flag1,flag2}.BoolActions, turn.CardActions}.

property MUTEX = (n1.enter -> n1.leave -> MUTEX | n2.enter -> n2.leave -> MUTEX).

||FIELD = (n1:NEIGHBOR1 || n2:NEIGHBOR2 || {n1,n2}::FLAGS || {n1,n2}::TURN || MUTEX).

progress ENTER1 = {n1.enter} // NEIGHBOR 1 always gets to enter
progress ENTER2 = {n2.enter} // NEIGHBOR 2 always gets to enter

||GREEDY = FIELD << {{n1,n2}.{flag1,flag2}.setTrue}.
